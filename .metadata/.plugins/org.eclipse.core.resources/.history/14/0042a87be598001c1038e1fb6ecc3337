package com.hero.test;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpEntity;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.net.http.HttpHeaders;


@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
@AutoConfigureMockMvc
public class heroTest {
	
    @Autowired
    private MockMvc mvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void prestamoLibroUsuarioAfiliadoDeberiaAlmacenarCorrectamenteYCalcularFechaDeDevolucion() throws Exception {

        HttpHeaders headers = new HttpHeaders();
    	headers.set("Content-Type", "application/json; charset=UTF-8");
    	HttpEntity<RegistroDetallesDTO> entity = new HttpEntity<>(registrodetallesDTO, headers);

        ResponseEntity<RegistroDetallesDTO> registrodetallesResponseDTO = new ResponseEntity<RegistroDetallesDTO>(registrodetallesDTO, HttpStatus.ACCEPTED);

        Mockito.when(restTemplate.exchange(
    				Mockito.eq(String.format("%s%s", url,  "/"+ GET_PATH+"/")), 
    				Mockito.eq(HttpMethod.POST),
    				Mockito.eq(entity),
    				Mockito.eq(RegistroDetallesDTO.class))
    				).thenReturn(registrodetallesResponseDTO);

        assertNotNull(registrodetallesService.save(registrodetallesDTO));

}
